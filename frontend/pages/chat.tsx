import { GetServerSideProps } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import ChatList from "../component/ChatList";
import Pusher, { Channel } from "pusher-js";
import { useAuthToken } from "../hooks/AuthToken";
import { getGroupMembers, getRole } from "../controllers/UserController";
import { InboxData, IUser } from "../Models";
import Error from "../component/Error";
import MessageInbox from "../component/MessageInbox";
Pusher.log = function (msg) {
  console.log(msg);
};

type ChatProps = {
  groupUsers?: IUser[];
  statusCode?: number;
  message?: string;
  inboxDatas?: InboxData[];
};

export default function Chat({ inboxDatas, statusCode, message }: ChatProps) {
  //handle any error might accure while preparing page on the server
  if (statusCode && message) {
    return <Error statusCode={statusCode} message={message} />;
  }
  const [pusher, setPusher] = useState<Pusher>();
  const [channel, setChannel] = useState<Channel>();
  const [selectedUserIndex, setSelectedUserIndex] = useState<number>();
  const { token, user } = useAuthToken();
  const [inboxesData, setInboxesData] = useState(inboxDatas);
  const inboxesDataRef = useRef(inboxesData);

  useEffect(() => {
    if (!token || !user) return;
    setPusher(
      new Pusher(process.env.NEXT_PUBLIC_PUSHER_APP_KEY!, {
        cluster: "eu",
        authEndpoint: process.env.NEXT_PUBLIC_BACKED_PUSHER_AUTH_ENDPOINT,
        auth: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      })
    );
  }, [token]);
  //pusher init
  useEffect(() => {
    if (!pusher) return;
    setChannel(pusher.subscribe(`private-chat-${user?.email}`));
  }, [pusher]);
  //subscribe to event when connected to pusher
  useEffect(() => {
    if (!channel) return;
    console.log("channel is set");
    //recievied message
    //TODO: implemnt logic for recieving messages
    channel.bind("message-received", function (data: any) {
      let user = inboxesDataRef.current?.find((val) => {
        return val.user?.email === data.sentBy;
      });
      if (!user) return;

      //update inbox if it's open
      if (inboxesData![selectedUserIndex!] === user) {
        //add the new message to messages
      }

      //update last message
      user.lastMessage = { message: data.message, sentBy: data.sentBy };
      setInboxesData([
        user,
        ...inboxesDataRef.current!.filter((val) => {
          return val !== user;
        }),
      ]);
    });
  }, [channel]);

  return (
    <div>
      <Head>
        <title>Chat</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="dark:bg-gray-800 w-sceen h-screen flex ">
        <ChatList
          inboxesData={inboxesData ?? []}
          // event when contact is pressed
          selectUser={(index: number) => {
            setSelectedUserIndex(index);
          }}
        />
        <MessageInbox
          inboxData={
            selectedUserIndex != undefined
              ? inboxesData![selectedUserIndex]
              : null
          }
          updateInboxData={(inbox) => {
            setInboxesData(
              inboxesData?.map((val) => {
                return val.user !== inbox.user ? val : inbox;
              })
            );
          }}
        />
      </div>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps<ChatProps> = async (
  context
) => {
  let statusCode = 500;
  let message = "Unauthorizied";
  try {
    const token = context.req.cookies.token;
    //TODO: change admin to etudiant when dev is finished
    if ((await getRole(context.req.cookies.token)) === "wiow") {
      statusCode = 500;
      message = "Unauthorizied";
      return {
        props: { statusCode, message },
      };
    }

    //TODO: get group  member
    const inboxDatas = await getGroupMembers(token);

    return {
      props: {
        inboxDatas,
      },
    };
  } catch (error: any) {
    statusCode = 500;
    message = "Uknown";
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
      statusCode = error.response.status;
      message = error.response.data.message;
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
      statusCode = 500;
      message = "No response recieved";
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log("Error", error.message);
      statusCode = 400;
      message = "Could not set up the request";
    }
    return {
      props: { message, statusCode },
    };
  }
};
